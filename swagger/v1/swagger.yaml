openapi: 3.0.1
info:
  title: API V1
  version: v1
  description: API for managing users, movies, and subscriptions
paths:
  "/users":
    post:
      summary: User registration
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  mobile_number:
                    type: string
        '422':
          description: Invalid registration request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    mobile_number:
                      type: string
                  required:
                  - name
                  - email
                  - password
                  - mobile_number
              required:
              - user
  "/users/sign_in":
    post:
      summary: User login
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              examples:
                success:
                  value:
                    id: 1
                    email: user@example.com
                    name: Aman
                    mobile_number: "+12345678901"
                    token: some_jwt_token_here
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  name:
                    type: string
                  mobile_number:
                    type: string
                  token:
                    type: string
        '401':
          description: Unauthorized login attempt
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid email or password
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                  required:
                  - email
                  - password
              required:
              - user
  "/users/sign_out":
    delete:
      summary: User logout
      tags:
      - Authentication
      security:
      - BearerAuth: []
      responses:
        '204':
          description: User logged out successfully
  "/api/v1/current_user":
    get:
      summary: Fetch current user
      tags:
      - Users
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User details returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  "/api/v1/update_device_token":
    post:
      summary: Update user device token
      tags:
      - Users
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceTokenInput'
        required: true
      responses:
        '200':
          description: Device token updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Device token updated successfully"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  "/api/v1/toggle_notifications":
    patch:
      summary: Toggle user notifications preference
      tags:
      - Users
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Notifications preference updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notifications preference updated"
                  notifications_enabled:
                    type: boolean
                    example: true
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  "/api/v1/movies":
    get:
      summary: List movies
      tags:
      - Movies
      parameters:
      - name: title
        in: query
        description: Filter movies by title (case-insensitive)
        required: false
        schema:
          type: string
      - name: genre
        in: query
        description: Filter movies by genre
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
          default: 1
      - name: per_page
        in: query
        description: Number of movies per page
        required: false
        schema:
          type: integer
          default: 10
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
        '404':
          description: No movies found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No movies found"
    post:
      summary: Create a new movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[genre]:
                  type: string
                  description: Genre of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
              required:
              - movie[title]
              - movie[genre]
              - movie[release_year]
              - movie[director]
              - movie[duration]
              - movie[description]
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added successfully"
                  movie:
                    $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/movies/{id}":
    get:
      summary: Fetch a movie by ID
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
    patch:
      summary: Update a movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to update
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[genre]:
                  type: string
                  description: Genre of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
    delete:
      summary: Delete a movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to delete
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Movie deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
  "/api/v1/subscriptions":
    post:
      summary: Create a subscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_type:
                  type: string
                  enum: ["1_day", "1_month", "3_months"]
                  description: The type of subscription plan
              required:
              - plan_type
        required: true
      responses:
        '200':
          description: Subscription session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: Stripe checkout session ID
                  url:
                    type: string
                    description: URL to redirect user for payment
                required:
                - session_id
                - url
        '400':
          description: Invalid plan type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid plan type"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
  "/api/v1/subscriptions/status":
    get:
      summary: Check subscription status
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Subscription status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan_type:
                    type: string
                    enum: ["free", "basic", "premium"]
                    description: Current subscription plan type
                  message:
                    type: string
                    description: Additional message (e.g., downgrade notice)
                    nullable: true
                required:
                - plan_type
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active subscription found"
  "/api/v1/subscriptions/success":
    get:
      summary: Handle successful subscription payment
      tags:
      - Subscriptions
      parameters:
      - name: session_id
        in: query
        description: Stripe checkout session ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription updated successfully"
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
servers:
- url: http://localhost:3000
  description: Local server
- url: https://movie-explorer-ror-amansharma.onrender.com
  description: Production server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the movie
        title:
          type: string
          description: Title of the movie
        genre:
          type: string
          description: Genre of the movie
        release_year:
          type: integer
          description: Release year of the movie
        rating:
          type: number
          format: float
          description: Rating of the movie (0 to 10)
          nullable: true
        director:
          type: string
          description: Director of the movie
        duration:
          type: integer
          description: Duration of the movie in minutes
        description:
          type: string
          description: Description of the movie
        premium:
          type: boolean
          description: Whether the movie is premium
        poster_url:
          type: string
          description: URL of the movie poster (from Cloudinary)
          nullable: true
        banner_url:
          type: string
          description: URL of the movie banner (from Cloudinary)
          nullable: true
      required:
        - id
        - title
        - genre
        - release_year
        - director
        - duration
        - description
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the user
          example: "123"
        email:
          type: string
          description: Email address of the user
          example: "user@example.com"
        role:
          type: string
          description: Role of the user (e.g., admin, user)
          example: "user"
      required:
        - id
        - email
        - role
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: ["Device token is invalid"]
      required:
        - errors
    DeviceTokenInput:
      type: object
      properties:
        device_token:
          type: string
          description: Device token for push notifications
          example: "abc123def456"
      required:
        - device_token
    Subscription:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the subscription
        user_id:
          type: integer
          description: ID of the associated user
        plan_type:
          type: string
          enum: ["free", "basic", "premium"]
          description: Type of subscription plan
        status:
          type: string
          enum: ["active", "inactive", "cancelled"]
          description: Status of the subscription
        stripe_customer_id:
          type: string
          description: Stripe customer ID
          nullable: true
        stripe_subscription_id:
          type: string
          description: Stripe subscription ID
          nullable: true
        expires_at:
          type: string
          format: date-time
          description: Subscription expiration date
          nullable: true
      required:
        - id
        - user_id
        - plan_type
        - status